# -*- coding: utf-8 -*-
"""CircelRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/zhangpin10/543cca8fade26c8d9ff14ceb60f58b80/circelregression.ipynb
"""

import numpy as np
from shapely.geometry.point import Point
from skimage.draw import circle_perimeter_aa
import matplotlib.pyplot as plt
#from CircleDetector import * 
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))


def draw_circle(img, row, col, rad):
    rr, cc, val = circle_perimeter_aa(row, col, rad)
    valid = (
        (rr >= 0) &
        (rr < img.shape[0]) &
        (cc >= 0) &
        (cc < img.shape[1])
    )
    img[rr[valid], cc[valid]] = val[valid]


def noisy_circle(size, radius, noise):
    img = np.zeros((size, size), dtype=np.float)

    # Circle
    row = np.random.randint(size)
    col = np.random.randint(size)
    rad = np.random.randint(10, max(10, radius))
    draw_circle(img, row, col, rad)

    # Noise
    img += noise * np.random.rand(*img.shape)
    return (row, col, rad), img

def find_circle(img):
    # Fill in this function
    return 100, 100, 30


def iou(params0, params1):
    row0, col0, rad0 = params0
    row1, col1, rad1 = params1

    shape0 = Point(row0, col0).buffer(rad0)
    shape1 = Point(row1, col1).buffer(rad1)

    return (
        shape0.intersection(shape1).area /
        shape0.union(shape1).area
    )


def main():
    results = []
    for _ in range(1000):
        params, img = noisy_circle(200, 50, 2)
        detected = find_circle(img)
        results.append(iou(params, detected))
    results = np.array(results)
    print((results > 0.7).mean())


keep_rate = 0.8
keep_prob = tf.placeholder(tf.float32)

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')

def maxpool2d(x):
    #                        size of window         movement of window
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

def convolutional_neural_network(x):
    weights = {'W_conv1':tf.Variable(tf.random_normal([3,3,1,16])),
               'W_conv2':tf.Variable(tf.random_normal([3,3,16,16])),
               'W_conv3':tf.Variable(tf.random_normal([3,3,16,32])),
               'W_conv4':tf.Variable(tf.random_normal([3,3,32,32])),
               'W_conv5':tf.Variable(tf.random_normal([3,3,32,64])),
               'W_conv6':tf.Variable(tf.random_normal([3,3,64,64])),
               'W_fc':tf.Variable(tf.random_normal([25*25*64,1024])),
               'out':tf.Variable(tf.random_normal([1024, 3]))}

    biases = {'b_conv1':tf.Variable(tf.random_normal([16])),
              'b_conv2':tf.Variable(tf.random_normal([16])),
              'b_conv3':tf.Variable(tf.random_normal([32])),
              'b_conv4':tf.Variable(tf.random_normal([32])),
              'b_conv5':tf.Variable(tf.random_normal([64])),
              'b_conv6':tf.Variable(tf.random_normal([64])),
              'b_fc':tf.Variable(tf.random_normal([1024])),
              'out':tf.Variable(tf.random_normal([3]))}

    x = tf.reshape(x, shape=[-1, 200, 200, 1])

    conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])
    #conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])
    conv2 = maxpool2d(conv1)
    
    conv3 = tf.nn.relu(conv2d(conv2, weights['W_conv3']) + biases['b_conv3'])
    #conv4 = tf.nn.relu(conv2d(conv3, weights['W_conv4']) + biases['b_conv4'])
    conv4 = maxpool2d(conv3)

    conv5 = tf.nn.relu(conv2d(conv4, weights['W_conv5']) + biases['b_conv5'])
    #conv6 = tf.nn.relu(conv2d(conv5, weights['W_conv6']) + biases['b_conv6'])
    conv6 = maxpool2d(conv5)

    fc = tf.reshape(conv6,[-1, 25*25*64])
    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])
    fc = tf.nn.dropout(fc, keep_rate)

    output = tf.matmul(fc, weights['out'])+biases['out']

    return output

def train_neural_network():
  x = tf.placeholder(tf.float32, shape=[None, 200, 200], name = "x")
  y = tf.placeholder(tf.float32, shape = [None, 3], name = "y")
  prediction = convolutional_neural_network(x)
  cost = tf.math.reduce_sum(tf.math.squared_difference(prediction, y))
  optimizer = tf.train.AdamOptimizer().minimize(cost)
  
  hm_epochs = 10
  batch_num = 1000
  with tf.Session() as sess:
      sess.run(tf.initialize_all_variables())
      for epoch in range(hm_epochs):
          epoch_loss = 0
          for i in range(batch_num):
              x_batch = []
              y_batch = []
              for _ in range(32):
                    params, img = noisy_circle(200, 50, 2)
                    y_batch.append(params), x_batch.append(img)
              _, c, p = sess.run([optimizer, cost, prediction], feed_dict={x: x_batch, y: y_batch})
              print('Batch:', i, '    Loss:', c,)  #'    Prediction:', p
              epoch_loss += c
              
          print('Epoch', epoch, 'completed out of',hm_epochs,'loss:',epoch_loss)

      # correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))

      # accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
      # print('Accuracy:',accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))


if __name__ == '__main__':
  train_neural_network()